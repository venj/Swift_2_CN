//: [<< 第2章Swift导览](@previous) | [Next >>](@next)

/*:

# 语言指南

*/

/*:

## 基础知识

Swift是开发iOS，OS X和watchOS应用的全新语言。尽管如此，Swift的很多方面对于有过C和Objective-C开发经验的程序员来说都会觉得很熟悉。

Swift包含了所有它自己版本的C和Objective-C的数据类型，包括整形`Int`，浮点型`Double`和`Float`，布尔型`Bool`，以及文本数据类型`String`。Swift还提供了加强版的三种集合类型，`Array`，`Set`和`Dictionary`，这些集合类型将在[集合类型]()中详述。

和C一样，Swift使用变量来存储值，用不同的名字来区分变量。Swift还广泛使用了值不会变化的“变量”，它也被称为“常量”，它们比C语言中的常量强大很多。常量在Swift中被广泛使用，在你处理不需要变化的值的时候，常量使得代码更安全，也能更清楚的表明你的使用意图。

除了常见的类型外，Swift还引入了Objective-C中没有的高级数据类型，例如元组(Tuple)。元组使你能够创建和传递一组值。你可以使用元组作为函数唯一的复合返回值，实现从一个函数中同时返回多个值的功能。

Swift还引入了可选类型（optional types），可以处理值不存在的情况。可选类型值可以代表“这是一个值，它等于x”或者“这是一个空值”。可选类型与Objective-C中的`nil`指针的用法类似，但是可选类型可以代表任何数据类型，而不仅限于类。可选类型比Objective-C中的`nil`更安全，意义更丰富。它是Swift的很多强大特性的核心要素。

可选类型是Swift*类型安全*的一个重要的例子。Swift能帮你弄清楚你的代码能处理的数值的类型。如果你的某段代码希望传入一个`String`，那么类型安全机制能帮助你避免不小心传入一个`Int`类型的值。这种限制使你能在开发过程中尽早地发现和修正错误。

*/

/*:

### 常量和变量

常量和变量都有一个名字（例如`maximumNumberOfLoginAttempts或者`welcomeMessage`）和一个某种类型的值（例如数字`10`或者是字符串`Hello`）。常量的值一旦设置，将无法再改变，而变量的值在设置后可以在将来被改成别的值。
*/

/*:

### 声明常量和变量

常量和变量在使用前需要先声明。你可以使用`let`关键词声明常量，用`var`关键词声明变量。下面的例子展示了常量和变量是如何应用在追踪用户登录尝试次数这个场景下的：

*/

let maximumNumberOfLoginAttempts = 10
var currentLoginAttempt = 0

/*:

这段代码用自然语言表达就是：

“声明一个新的常量，叫做`maximumNumberOfLoginAttempts`，并把它的值设定为10。然后再定义一个叫做`currentLoginAttempt`的新变量，并把它的初始值设置为`0`。“

在这个例子中，最大允许的登录次数被定义为一个常量，因为最大值是永远不会变化的。当前的登录尝试次数被定义为变量，因为这个值需要在每次失败的登录常识后增加。

你可以在一行代码中声明多个变量，用逗号将它们分隔开。

*/

var x = 0.0, y = 0.0, z = 0.0

/*:

> **注意**
>
> 如果您的代码中有一个存储值不回发生变化，那么请用`let`将它定义为常量。使用变量保存可以变化的值。

*/

/*:

### 类型标注

你可以在声明常量或变量的时候，提供一个类型标注（Type Annotation。译者注：这里将Annotation翻译成标注，用于区别英语同为annotation的另一个概念：注解），用来清楚的注明常量或变量可以存储的值的类型。你可以在常量或变量名后加上冒号，再加上一个空格，然后加上类型名，来进行类型标注。

下面这个例子为一个名为`welcomeMessage`的变量加上了类型标注，来表明它能保存`String`类型的值。

*/

var welcomeMessage: String

/*:

定义中的冒号意味着：“...的类型是...”，因此上面那行代码可以这样读：

“声明一个名为`welcomeMessage`的变量，它的类型是`String`。”

“...的类型是`String`”意味着“可以存储任何`String`类型的值。”你可以理解成可以存储“某种值”或者“某类值”。

`welcomeMessage`变量现在能被设置为任何字符串类型的值而不会报错。

*/

welcomeMessage = "Hello"

/*:

你可以在一行代码里，定义多个同一类型的相关变量，变量名之间用逗号进行分隔，只需在最后一个变量名后面使用一个类型标记：

*/

var red, green, blue : Double

/*:

> **注意**
>
> 实际使用中，你其实很少会用到类型标记。如果你在定义变量或常量的时候，设定了初始值，Swift几乎总是可以推导出变量或常量的正确类型，详见[类型安全和类型推断]()章节。在上面的`welcomeMessage`的例子中，我们没有给它设定初始值，因此`welcomeMessage`的类型需要使用类型标记指出，而不是从其初始值推断。

*/


/*:

### 给常量和变量命名

常量和变量的名字可以包含任何字符，甚至包括unicode字符：

*/

let π = 3.15159
let 你好 = "你好世界"
let 🐶🐂 = "dogcow"

/*:

常量和变量的名字不能包含空格字符、数学运算符号、箭头以及私有（或非法的）Unicode字符（code point）、或者绘制横线、方框的字符。也不能以数字开头，尽管数字可以出现在名字中的任何其他位置。

一旦你声明了一个某种类型的变量，你不能再次用同样的名字定义另一个变量，不能把它重新定义为另一种类型的变量，也不能把一个常量重新定义为变量或者把变量重新定义为常量。

*/


/*:

> **注意**
>
> 如果你需要定义一个与Swift关键词同名的变量或常量，你需要在使用时用反引号（`）包围变量名。不过还是请尽量避免使用与关键词同名的变量名，除非你真的别无选择。

*/

/*:

你可以把已有变量的值换成另一个类型兼容的值。在下面这个例子中，`friendlyWelcome`的值从`Hello!`被改成了`Bonjour!`：

*/

var friendlyWelcome = "Hello!"
friendlyWelcome = "Bonjour!"
// friendlyWelcome现在值为 "Bonjour!"

/*:

与变量不同的是，常量的值一旦设置，将无法改变。试图改变常量的值，将在代码编译时报错：

*/

let languageName = "Swift"
//languageName = "Swift++"
// 取消注释上面这行代码会产生一个编译时错误 - languageName cannot be changed （languageName不能修改）

/*:

### 打印常量和变量

你可以使用`print(_:)`函数打印变量或常量的当前值：

*/

print(friendlyWelcome)
// 打印出 "Bonjour!"

/*:

`print(_:)`是一个全局函数，能够把值打印到适当的输出设备，并在后面换行。比如，在Xcode中，`print(_:)`函数会在Xcode的“Console”面板中打印输出。（有一个相关的函数`print(_:appendNewLine:)`实现同样的打印功能，区别是在打印的值后面加换行符是可选的。）

`print(_:)`函数能打印传入的任意`String`值：

*/

print("This is a string")
// 打印"This is a string"

/*:

`print(_:)`函数可以打印更佳复杂的日志消息。这些消息可以包括变量和常量的当前值。

要在一个长字符串中，使用占位符包含变量或常量的值，Swift使用**字符串替换（string interpolation）**机制。Swift使用常量或变量的当前值替换这些占位符。用括号包围变量名，再在开括号前用反斜杠转义：

*/

print("The current value of friendlyWelcome is \(friendlyWelcome)")
// 打印"The current value of friendlyWelcome is Bonjour!"

/*:

> **注意**
>
> 在字符串替换中可以使用的所有选项，将在[字符串替换]()章节中介绍。

*/

/*:

### 注释

你可以在代码中使用注释添加不执行的文本，用来作为笔记或备忘录。Swift编译器编译代码的时候，会忽略注释。

Swift的注释和C语言的注释非常相似。单行注释使用两个正斜杠（`//`）开头：

*/

// 这是一行注释

//: 多行注释以一个正斜杠加星号（`/*`）开头，以星号加正斜杠（`*/`）结尾。

/*  这也是一个注释，
但是写在了多行中 */

/*:

和C语言中的多行注释不同的是，Swift的多行注释是可以嵌套在多行注释中的。你可以在一个多行注释块中，开始一个内部的多行注释，然后关闭内部注释块，最后关闭外部注释块，实现注释嵌套。

*/

/* 这是第一个多行注释的开始
/* 这是第二个，嵌套的多行注释 */
这是第一个多行注释的结尾 */

/*:

嵌套的多行注释让你能够快速简单地注释掉大段的代码，即便代码已经内部包含了多行注释。

*/

/*:

### 分号

和其他语言一样，Swift并不要求你在代码的每行语句后使用分号（`;`）结尾，尽管如果你愿意，你也可以加。如果你在一行中编写多个语句，你就**必须**使用分号分隔：

*/

let cat = "🐱"; print(cat)
// 打印出：🐱

/*:

### 整型

**整型**是不含小数部分的整数类型，例如`42`和`-23`。整型可以是有符号(signed)（正值，零，或者负值）或者是无符号的（正值和零）。

Swift提供了8位，16位，32位和64位的有符号和无符号整型。这些整型的命名规则与C语言类似，8位无符号整型是`UInt8`，32位有符号整型是`Int32`。与Swift中的其它类型一样，这些整型类型都以大写字母开头。

*/

/*:

### 整型的最大最小值

你可以通过整型的`min`和`max`属性的到每种整型的最小值和最大值：

*/

let minValue = UInt8.min // minValue等于0，类型为UInt8。
let maxValue = UInt8.max // maxValue等于255，类型为UInt8。











//: [<< 第2章Swift导览](@previous) | [Next >>](@next)
