//: [<< 第2章Swift导览](@previous) | [Next >>](@next)

/*:

# 语言指南

*/

/*:

## 基础知识

Swift是开发iOS，OS X和watchOS应用的全新语言。尽管如此，Swift的很多方面对于有过C和Objective-C开发经验的程序员来说都会觉得很熟悉。

Swift包含了所有它自己版本的C和Objective-C的数据类型，包括整形`Int`，浮点型`Double`和`Float`，布尔型`Bool`，以及文本数据类型`String`。Swift还提供了加强版的三种集合类型，`Array`，`Set`和`Dictionary`，这些集合类型将在[集合类型]()中详述。

和C一样，Swift使用变量来存储值，用不同的名字来区分变量。Swift还广泛使用了值不会变化的“变量”，它也被称为“常量”，它们比C语言中的常量强大很多。常量在Swift中被广泛使用，在你处理不需要变化的值的时候，常量使得代码更安全，也能更清楚的表明你的使用意图。

除了常见的类型外，Swift还引入了Objective-C中没有的高级数据类型，例如元组(Tuple)。元组使你能够创建和传递一组值。你可以使用元组作为函数唯一的复合返回值，实现从一个函数中同时返回多个值的功能。

Swift还引入了可选类型（optional types），可以处理值不存在的情况。可选类型值可以代表“这是一个值，它等于x”或者“这是一个空值”。可选类型与Objective-C中的`nil`指针的用法类似，但是可选类型可以代表任何数据类型，而不仅限于类。可选类型比Objective-C中的`nil`更安全，意义更丰富。它是Swift的很多强大特性的核心要素。

可选类型是Swift*类型安全*的一个重要的例子。Swift能帮你弄清楚你的代码能处理的数值的类型。如果你的某段代码希望传入一个`String`，那么类型安全机制能帮助你避免不小心传入一个`Int`类型的值。这种限制使你能在开发过程中尽早地发现和修正错误。

### 常量和变量

常量和变量都有一个名字（例如`maximumNumberOfLoginAttempts或者`welcomeMessage`）和一个某种类型的值（例如数字`10`或者是字符串`Hello`）。常量的值一旦设置，将无法再改变，而变量的值在设置后可以在将来被改成别的值。

### 声明常量和变量



*/




//: [<< 第2章Swift导览](@previous) | [Next >>](@next)
